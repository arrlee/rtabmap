# Image: introlab3it/rtabmap:focal

FROM ros:noetic-perception

ARG BuildType=Release
ENV EnvBuildType=$BuildType

RUN echo "QQQQQQQQQQQQ" ${EnvBuildType}

# Install build dependencies
RUN apt-get update && \
    apt-get install -y git software-properties-common ros-noetic-rtabmap-ros && \
    apt-get remove -y ros-noetic-rtabmap && \
    rm -rf /var/lib/apt/lists/

RUN apt-get update && apt-get install -y curl wget

WORKDIR /root/

ARG TARGETPLATFORM
ENV TARGETPLATFORM=${TARGETPLATFORM:-linux/amd64}
RUN echo "I am building for $TARGETPLATFORM"

ENV DEBIAN_FRONTEND=noninteractive
ARG CACHE_DATE=2016-01-02

# cmake 3.2 for Open3D
RUN wget https://cmake.org/files/v3.26/cmake-3.26.0.tar.gz && \
    tar zxvf cmake-3.26.0.tar.gz && \
    cd cmake-3.26.0 && \
    ./configure && \
    make -j$(nproc) && \
    make install && \
    cd .. && \
    rm -r cmake-3.26.0

# OpenCL
RUN mkdir neo && cd neo && \
    wget https://github.com/intel/intel-graphics-compiler/releases/download/igc-1.0.13230.7/intel-igc-core_1.0.13230.7_amd64.deb && \
    wget https://github.com/intel/intel-graphics-compiler/releases/download/igc-1.0.13230.7/intel-igc-opencl_1.0.13230.7_amd64.deb && \
    wget https://github.com/intel/compute-runtime/releases/download/23.05.25593.11/intel-level-zero-gpu-dbgsym_1.3.25593.11_amd64.ddeb && \
    wget https://github.com/intel/compute-runtime/releases/download/23.05.25593.11/intel-level-zero-gpu_1.3.25593.11_amd64.deb && \
    wget https://github.com/intel/compute-runtime/releases/download/23.05.25593.11/intel-opencl-icd-dbgsym_23.05.25593.11_amd64.ddeb && \
    wget https://github.com/intel/compute-runtime/releases/download/23.05.25593.11/intel-opencl-icd_23.05.25593.11_amd64.deb && \
    wget https://github.com/intel/compute-runtime/releases/download/23.05.25593.11/libigdgmm12_22.3.0_amd64.deb && \
    apt install ./*.deb && \
    apt install -y clinfo intel-gpu-tools && \
    rm -rf neo && \
    rm -rf /var/lib/apt/lists/


# PDAL
RUN apt-get update && \ 
    apt-get install -y libpdal-dev

# RealSense2
RUN apt-get install -y ros-noetic-librealsense2

# Azure Kinect DK
# Taken from https://github.com/microsoft/Azure-Kinect-Sensor-SDK/issues/1190#issuecomment-822772494
# K4A binaries on 20.04 not released yet, we should take those from 18.04
RUN if [ "$TARGETPLATFORM" = "linux/amd64" ]; then echo "Installing k4a..." && \
    echo "Download libk4a1.3_1.3.0_amd64.deb..." && \
    curl -sSL https://packages.microsoft.com/ubuntu/18.04/prod/pool/main/libk/libk4a1.3/libk4a1.3_1.3.0_amd64.deb > /tmp/libk4a1.3_1.3.0_amd64.deb && \
    echo "Download libk4a1.3-dev_1.3.0_amd64.deb..." && \
    curl -sSL https://packages.microsoft.com/ubuntu/18.04/prod/pool/main/libk/libk4a1.3-dev/libk4a1.3-dev_1.3.0_amd64.deb > /tmp/libk4a1.3-dev_1.3.0_amd64.deb && \
    echo "Download libk4abt1.0_1.0.0_amd64.deb..." && \
    curl -sSL https://packages.microsoft.com/ubuntu/18.04/prod/pool/main/libk/libk4abt1.0/libk4abt1.0_1.0.0_amd64.deb > /tmp/libk4abt1.0_1.0.0_amd64.deb && \
    echo "Download libk4abt1.0-dev_1.0.0_amd64.deb..." && \
    curl -sSL https://packages.microsoft.com/ubuntu/18.04/prod/pool/main/libk/libk4abt1.0-dev/libk4abt1.0-dev_1.0.0_amd64.deb > /tmp/libk4abt1.0-dev_1.0.0_amd64.deb && \
    echo "Download k4a-tools_1.3.0_amd64.deb..." && \
    curl -sSL https://packages.microsoft.com/ubuntu/18.04/prod/pool/main/k/k4a-tools/k4a-tools_1.3.0_amd64.deb > /tmp/k4a-tools_1.3.0_amd64.deb && \
    echo "Accept license..." && \
    echo 'libk4a1.3 libk4a1.3/accepted-eula-hash string 0f5d5c5de396e4fee4c0753a21fee0c1ed726cf0316204edda484f08cb266d76' | debconf-set-selections && \
    echo 'libk4abt1.0	libk4abt1.0/accepted-eula-hash	string	03a13b63730639eeb6626d24fd45cf25131ee8e8e0df3f1b63f552269b176e38' | debconf-set-selections && \
    dpkg -i /tmp/libk4a1.3_1.3.0_amd64.deb && \
    dpkg -i /tmp/libk4a1.3-dev_1.3.0_amd64.deb && \
    dpkg -i /tmp/libk4abt1.0_1.0.0_amd64.deb && \
    dpkg -i /tmp/libk4abt1.0-dev_1.0.0_amd64.deb && \
    apt-get install -y libsoundio1 && \
    dpkg -i /tmp/k4a-tools_1.3.0_amd64.deb && \
    rm /tmp/libk4a* /tmp/k4a*; fi

# libfreenect2 
RUN if [ "$TARGETPLATFORM" = "linux/amd64" ]; then echo "Installing libfreenect2..." && \
    apt-get install -y mesa-utils xserver-xorg-video-all libusb-1.0-0-dev libturbojpeg0-dev libglfw3-dev && \
    git clone https://github.com/OpenKinect/libfreenect2 && \
    cd libfreenect2 && \
    mkdir build && \
    cd build && \
    cmake .. && \
    make VERBOSE=1 -j$(nproc) && \
    make install && \
    cd && \
    rm -r libfreenect2; fi


# TBB
RUN apt-get remove libtbb2 libtbb-dev -y
RUN git clone -b v2021.2.0 --single-branch https://github.com/oneapi-src/oneTBB.git && \
    cd oneTBB && \
    mkdir build &&  cd build && \
    cmake -DCMAKE_CXX_FLAGS="-march=native -faligned-new -g" -LA .. && \
    cmake --build . -j $(nproc) && \
    cmake --install . && \
    cd && rm -rf oneTBB

# Eigen
RUN apt-get remove libeigen3-dev -y
RUN git clone -b 3.3.9 --single-branch https://gitlab.com/libeigen/eigen.git && \
    cd eigen && \
    mkdir build && cd build && \
    cmake -DBUILD_WITH_MARCH_NATIVE=ON -DBoost_INCLUDE_DIR=$BOOSTDIR/include -LA .. && \
    make VERBOSE=1 -j$(nproc) && \
    make install && \
    cd && \
    rm -r eigen


# boost
RUN dpkg -l | grep boost
RUN apt-get remove -y libboost-all-dev '^libboost-.*'
RUN wget https://boostorg.jfrog.io/artifactory/main/release/1.71.0/source/boost_1_71_0.tar.bz2 && \
    tar jxf boost_1_71_0.tar.bz2 && \
    cd boost_1_71_0 && \
    ./bootstrap.sh && \
    ./b2 -j$(nproc) cxxflags="-march=native"  cxxflags=" -faligned-new" && ./b2 headers && ./b2 install 
    

# suitesparse
RUN apt-get remove ros-noetic-libg2o libsuitesparse-dev libsuitesparseconfig5:amd64 cmake -y
RUN apt-get install libopenblas-dev gfortran libgmp-dev libmpfr-dev libmpfrc++-dev -y
RUN git clone -b v6.0.3 --single-branch https://github.com/DrTimothyAldenDavis/SuiteSparse.git && \
    cd SuiteSparse && \
    echo ${EnvBuildType} && \
#    mkdir build && cd build && \
#    cmake -DCMAKE_BUILD_TYPE=${EnvBuildType} -DBUILD_WITH_MARCH_NATIVE=ON -DCMAKE_CXX_FLAGS="-march=native -faligned-new -g" -LA .. && \
#    make VERBOSE=1 -j$(nproc) && \
    CMAKE_OPTIONS="-DCMAKE_BUILD_TYPE=${EnvBuildType} -DENABLE_CUDA=OFF -DDEMO=OFF -LA" make && \
    make install && \
    cd && \
    rm -r SuiteSparse

# Ceres
# RUN apt-get install libgflags-dev libgoogle-glog-dev libgoogle-glog0v5 -y
#    /usr/local/bin/cmake -DCERES_THREADING_MODEL=OPENMP -DCMAKE_CXX_STANDARD=14 -DBUILD_EXAMPLES=OFF -DBUILD_TESTING:BOOL=OFF -DBUILD_WITH_MARCH_NATIVE=ON -DCMAKE_CXX_FLAGS="-march=native -faligned-new -g" -DEigen3_DIR=/usr/local/include/eigen3/ -LA .. && \
RUN apt-get install libgflags-dev libgoogle-glog-dev libgoogle-glog0v5 -y
RUN git clone -b 2.1.0 --single-branch https://ceres-solver.googlesource.com/ceres-solver && \
    cd ceres-solver && \
    mkdir build && cd build && \
    /usr/local/bin/cmake -DBUILD_EXAMPLES=OFF -DBUILD_TESTING:BOOL=OFF -DBUILD_WITH_MARCH_NATIVE=ON -DCMAKE_CXX_FLAGS="-march=native -faligned-new -g" -DEigen3_DIR=/usr/local/include/eigen3/ -LA .. && \
    make VERBOSE=1 -j$(nproc) && \
    make install && \
    cd && \
    rm -rf ceres-solver

# GTSAM
# RUN add-apt-repository ppa:borglab/gtsam-release-4.0 -y
# RUN apt install libgtsam-dev libgtsam-unstable-dev -y
#    mv ceres/ ceres_ && \
# -DCMAKE_CXX_FLAGS="-std=c++17"
#    make VERBOSE=1 -j$(nproc) && \
#    git checkout ab92779b25b04b376fbbd1846bbbd21904c50e7a && \
#    cmake -DCMAKE_CXX_STANDARD=17 -DCMAKE_CXX_STANDARD_REQUIRED=ON -DGTSAM_BUILD_WITH_MARCH_NATIVE=ON -DGTSAM_USE_SYSTEM_EIGEN:BOOL=ON -DEigen3_DIR=/usr/local/include/eigen3/ -DGTSAM_WITH_TBB=ON -DCMAKE_BUILD_TYPE=${EnvBuildType} -DGTSAM_USE_SYSTEM_METIS:BOOL=ON -LA .. && \
#    cd gtsam/3rdparty/ && \
#    mv Eigen/ Eigen_ && \
#    cd ../.. && \
#  || /root/gtsam/build/CMakeFiles/CMakeOutput.log /root/gtsam/build/CMakeFiles/CMakeError.log
#    cmake -DGTSAM_BUILD_WITH_MARCH_NATIVE=ON -DCMAKE_CXX_FLAGS="-march=native -mavx2 -g -fmessage-length=0  -fopenmp -std=c++14 -O3 -DNDEBUG   -Wall -Wno-unknown-pragmas -msse4.2 -mfpmath=sse -march=native -fPIC -std=gnu++14 -MD -MT" -DGTSAM_WITH_TBB=OFF -DGTSAM_USE_SYSTEM_EIGEN:BOOL=ON -DEigen3_DIR=/usr/local/include/eigen3/ -DCMAKE_BUILD_TYPE=${EnvBuildType} -LA .. &&  \
RUN git clone -b 4.1.1 https://github.com/borglab/gtsam.git && \
    wget https://github.com/borglab/gtsam/pull/1158.patch && \
    cd gtsam && \
    git config --global user.name "FIRST_NAME LAST_NAME" && \
    git config --global user.email "MY_NAME@example.com" && \
    git am ../1158.patch && \
    mkdir build && cd build && \
    cmake -DCMAKE_CXX_FLAGS="-march=native -faligned-new -g" -DCMAKE_CXX_STANDARD=17 -DCMAKE_CXX_STANDARD_REQUIRED=ON -DGTSAM_BUILD_WITH_MARCH_NATIVE=ON -DGTSAM_WITH_TBB=ON -DGTSAM_USE_SYSTEM_EIGEN:BOOL=ON -DEigen3_DIR=/usr/local/include/eigen3/ -DCMAKE_BUILD_TYPE=${EnvBuildType} -DGTSAM_BUILD_EXAMPLES_ALWAYS:BOOL=OFF -LA .. &&  \
    make VERBOSE=1 -j$(nproc) && \
    make install && \
    cd && \
    rm -r gtsam


# OpenCV
RUN apt-get remove -y libopencv-dev libopencv-contrib-dev libopencv-core-dev libopencv-contrib4.2 libopencv-core4.2
RUN git clone -b 4.2.0 https://github.com/opencv/opencv.git && \
    git clone -b 4.2.0 https://github.com/opencv/opencv_contrib.git && \
    mkdir opencv_build && cd opencv_build && \
    cmake -DOPENCV_SKIP_CMAKE_CXX_STANDARD=ON -DCMAKE_CXX_FLAGS="-std=c++14 -march=native -faligned-new -g" -DCMAKE_CXX_STANDARD=14 -DCMAKE_CXX_STANDARD_REQUIRED=ON -DCMAKE_CXX_EXTENSIONS=ON -DCMAKE_BUILD_TYPE=${EnvBuildType} -DOPENCV_ENABLE_NONFREE:BOOL=ON -DWITH_OPENCL=OFF -DOPENCV_EXTRA_MODULES_PATH=../opencv_contrib/modules -D CMAKE_INSTALL_PREFIX=/usr/local -DCPU_BASELINE=AVX2 -DBUILD_TESTS=OFF -DBUILD_PERF_TESTS=OFF -DBUILD_EXAMPLES=OFF -DBUILD_opencv_face=OFF -DBUILD_opencv_sfm:BOOL=OFF -DBUILD_opencv_apps=OFF \
             -DWITH_JPEG=ON \
             -DBUILD_JPEG=OFF \
             -LA ../opencv && \
    make VERBOSE=0 -j$(nproc) && \
    make install && \
    cd && \
    rm -r opencv_build opencv opencv_contrib

# libpointmatcher 
# #commit February 13 2021
RUN git clone https://github.com/ethz-asl/libnabo.git && \
    cd libnabo && \
    git checkout 3cab7eed92bd5d4aed997347b8c8a2692a83a532 && \
    mkdir build && \
    cd build && \
    cmake -DCMAKE_CXX_STANDARD=17 -DCMAKE_BUILD_TYPE=${EnvBuildType} -DCMAKE_CXX_FLAGS="-march=native -faligned-new -g" -DUSE_OPEN_CL:BOOL=FALSE -DLIBNABO_BUILD_EXAMPLES=OFF -DLIBNABO_BUILD_TESTS=OFF -DLIBNABO_BUILD_PYTHON=OFF .. -L && \
    make VERBOSE=1 -j$(nproc) && \
    make install && \
    cd && \
    rm -r libnabo
# #commit April 6 2021
RUN git clone https://github.com/ethz-asl/libpointmatcher.git && \
    cd libpointmatcher && \
    git checkout 76f99fce0fe69e6384102a0343fdf8d262626e1f && \
    mkdir build && \
    cd build && \
    cmake -DCMAKE_CXX_STANDARD=17 -DCMAKE_BUILD_TYPE=${EnvBuildType} -DCMAKE_CXX_FLAGS="-march=native -faligned-new -g" -DUSE_OPEN_CL:BOOL=OFF -L .. && \
    make VERBOSE=1 -j$(nproc) && \
    make install && \
    cd && \
    rm -r libpointmatcher
    

# # zed open capture
# RUN if [ "$TARGETPLATFORM" = "linux/amd64" ]; then echo "Installing zed-open-capture..." && \
#     apt install libusb-1.0-0-dev libhidapi-libusb0 libhidapi-dev && \
#     git clone https://github.com/stereolabs/zed-open-capture.git && \
#     cd zed-open-capture && \
#     mkdir build && \
#     cd build && \
#     cmake .. && \
#     make -j$(nproc) && \
#     make install && \
#     cd && \
#     rm -r zed-open-capture; fi

# AliceVision v2.4.0 modified (Sept 13 2021)
# RUN if [ "$TARGETPLATFORM" = "linux/amd64" ]; then echo "Installing AliceVision..." && \
# apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y \
#       libsuitesparse-dev \
#       libceres-dev \
#       xorg-dev \
#       libglu1-mesa-dev \
#       wget; fi
# RUN if [ "$TARGETPLATFORM" = "linux/amd64" ]; then git clone https://github.com/OpenImageIO/oiio.git && \
#     cd oiio && \
#     git checkout Release-2.0.12 && \
#     mkdir build && \
#     cd build && \
#     cmake -DUSE_PYTHON=OFF -DOIIO_BUILD_TESTS=OFF -DOIIO_BUILD_TOOLS=OFF .. && \
#     make -j$(nproc) && \
#     make install && \
#     cd && \
#     rm -r oiio; fi
# RUN if [ "$TARGETPLATFORM" = "linux/amd64" ]; then git clone https://github.com/assimp/assimp.git && \
#     cd assimp && \
#     git checkout 71a87b653cd4b5671104fe49e2e38cf5dd4d8675 && \
#     mkdir build && \
#     cd build && \
#     cmake .. && \
#     make -j$(nproc) && \
#     make install && \
#     cd && \
#     rm -r assimp; fi
# RUN if [ "$TARGETPLATFORM" = "linux/amd64" ]; then git clone https://github.com/alicevision/geogram.git && \
#     cd geogram && \
#     git checkout v1.7.6 && \
#     wget https://gist.githubusercontent.com/matlabbe/1df724465106c056ca4cc195c81d8cf0/raw/b3ed4cb8f9b270833a40d57d870a259eabfa4415/geogram_8b2ae61.patch && \
#     git apply geogram_8b2ae61.patch && \
#     ./configure.sh && \
#     cd build/Linux64-gcc-dynamic-Release && \
#     make -j$(nproc) && \
#     make install && \
#     cd && \
#     rm -r geogram; fi
# RUN if [ "$TARGETPLATFORM" = "linux/amd64" ]; then git clone --recurse-submodules https://github.com/alicevision/AliceVision.git --recursive && \
#     cd AliceVision && \
#     git checkout 0f6115b6af6183c524aa7fcf26141337c1cf3872 && \
#     git submodule update -i && \
#     wget https://gist.githubusercontent.com/matlabbe/1df724465106c056ca4cc195c81d8cf0/raw/b3ed4cb8f9b270833a40d57d870a259eabfa4415/alicevision_0f6115b.patch && \
#     git apply alicevision_0f6115b.patch && \
#     mkdir build && \
#     cd build && \
#     cmake -DALICEVISION_USE_CUDA=OFF -DALICEVISION_USE_APRILTAG=OFF -DALICEVISION_BUILD_SOFTWARE=OFF .. && \
#     make -j$(nproc) && \
#     make install && \
#     cd && \
#     rm -r AliceVision; fi


    # cd CCCoreLib/extern && \
    # git clone https://github.com/jlblancoc/nanoflann.git && \
    # cd nanoflann && \
    # git checkout v1.4.3 && \
    # mkdir build && \
    # cd build && \
    # cmake -DCMAKE_BUILD_TYPE=Debug -DNANOFLANN_BUILD_BENCHMARKS=OFF -DNANOFLANN_BUILD_EXAMPLES=OFF -DNANOFLANN_BUILD_TESTS=OFF .. && \
    # make -j$(nproc) && \
    # make install && \
    # cd ../../.. && \
# RUN apt-get install -y libcgal-dev libtbb-dev ninja-build
# RUN if [ "$TARGETPLATFORM" = "linux/amd64" ]; then git clone --recursive https://github.com/CloudCompare/CCCoreLib.git && \
#     cd CCCoreLib && \
#     git checkout 5990baecf64672065fe8d8d38938e2140eb4f1ac && \
#     mkdir build && \
#     cd build && \
#     cmake -DCMAKE_BUILD_TYPE=Debug -L .. && \
#     cmake --build . && \
#     cmake --install . && \
#     cd && \
#     cat /usr/local/lib/cmake/CCCoreLib/CCCoreLibConfig.cmake && \
#     echo "cat /usr/local/lib/cmake/CCCoreLib/CCCoreLibTargets.cmake" && \
#     cat /usr/local/lib/cmake/CCCoreLib/CCCoreLibTargets.cmake && \
#     rm -r CCCoreLib; fi

# Open Chisel
# RUN if [ "$TARGETPLATFORM" = "linux/amd64" ]; then git clone https://github.com/personalrobotics/OpenChisel.git && \
#     cd OpenChisel/open_chisel && \
#     mkdir build && \
#     cd build && \
#     cmake -DCMAKE_BUILD_TYPE=${EnvBuildType} .. && \
#     make -j$(nproc) && \
#     make install && \
#     cd && \
#     rm -r OpenChisel; fi


# RUN apt-get update && \
#     apt-get install -y llvm-dev libc++abi-dev libc++-dev

# Open3D
# RUN if [ "$TARGETPLATFORM" = "linux/amd64" ]; then git clone -b v0.16.0 https://github.com/isl-org/Open3D.git && \
#      cd Open3D && \
#      mkdir build && \
#      cd build && \
#      /usr/local/bin/cmake -DBUILD_SHARED_LIBS=ON -DGLIBCXX_USE_CXX11_ABI=ON -DCMAKE_BUILD_TYPE=${EnvBuildType} .. && \
#      make -j$(nproc) && \
#      make install && \
#      cd && \
#      rm -r Open3D; fi
#     

RUN rm /bin/sh && ln -s /bin/bash /bin/sh

RUN apt-get install qtbase5-dev qt5-default qtbase5-dev-tools libqt5x11extras5-dev -y
RUN date && dpkg -l

# VTK
RUN apt-get remove libvtk7-dev libvtk7-qt-dev libvtk7.1p-qt -y
RUN git clone -b v7.1.1 https://gitlab.kitware.com/vtk/vtk.git && \
    cd vtk && \
    mkdir build && cd build && \
    /usr/local/bin/cmake -DModule_vtkIOMPIImage=ON -DModule_vtkIOMPIParallel:BOOL=ON -DModule_vtkFiltersParallelDIY2:BOOL=ON -DModule_vtkGUISupportQt:BOOL=ON -DBUILD_TESTING:BOOL=OFF -DCMAKE_BUILD_TYPE=${EnvBuildType} -DBUILD_WITH_MARCH_NATIVE=ON -DCMAKE_CXX_FLAGS="-march=native -faligned-new -g" -DEigen3_DIR=/usr/local/include/eigen3/ \
     -DVTK_QT_VERSION:STRING=5 \
     -DQT_QMAKE_EXECUTABLE:PATH=/usr/lib/qt5/bin/qmake \
     -DVTK_Group_Qt:BOOL=ON \
     -DBUILD_SHARED_LIBS:BOOL=ON \
     -LA .. && \
    make -j$(nproc) && \
    make install && \
    cd ../.. && \
    rm -rf vtk

# PCL : Point cloud library
RUN apt-get remove -y libpcl-dev libpcl-common1.10 libpcl-people1.10
# RUN apt install libgtest-dev liblz4-dev python3.8-distutils -y
RUN apt install liblz4-dev python3.8-distutils -y
RUN git clone -b 1.9.2 --single-branch https://github.com/flann-lib/flann.git && \
    cd flann && mkdir build && cd build && \
    cmake -DCMAKE_CXX_FLAGS="-march=native -faligned-new -g" -DBUILD_apps=OFF -DCMAKE_BUILD_TYPE=${EnvBuildType} -DBUILD_EXAMPLES=OFF -DBUILD_PYTHON_BINDINGS=OFF -DBUILD_MATLAB_BINDINGS=OFF -DBUILD_DOC=OFF -DBUILD_WITH_MARCH_NATIVE=ON -LA .. && \
    make -j$(nproc) && \
    make install && \
    cd && \
    rm -r flann

RUN git clone -b pcl-1.13.0 --single-branch https://github.com/PointCloudLibrary/pcl && \
    cd pcl && \
    mkdir build && cd build && \
    cmake -DCMAKE_CXX_FLAGS="-march=native -faligned-new -g" -DWITH_CUDA:BOOL=OFF -DCMAKE_BUILD_TYPE=${EnvBuildType} -DBUILD_WITH_MARCH_NATIVE=ON -DPCL_ENABLE_MARCHNATIVE:BOOL=ON -LA .. && \
    make -j2 && \
    make install && \
    cd ../.. && \
    rm -r pcl


# CPU TDSF
# RUN if [ "$TARGETPLATFORM" = "linux/amd64" ]; then git clone https://github.com/arrlee/cpu_tsdf.git && \
#     cd cpu_tsdf && \
#     mkdir build && \
#     cd build && \
#     cmake .. && \
#     make -j$(nproc) && \
#     make install && \
#     cd && \
#     rm -r cpu_tsdf; fi

RUN gcc -v

# g2o
# ToDo: Test G2O_FAST_MATH, G2O_USE_OPENMP
RUN git clone -b 20201223_git --single-branch https://github.com/RainerKuemmerle/g2o.git && \
    cd g2o && \
    mkdir build && cd build && \
    /usr/local/bin/cmake -DCMAKE_BUILD_TYPE=${EnvBuildType} -DBUILD_WITH_MARCH_NATIVE=ON -DCMAKE_CXX_FLAGS="-march=native -faligned-new -g" -DG2O_BUILD_APPS=OFF -DG2O_BUILD_EXAMPLES=OFF -DG2O_USE_OPENGL=OFF -DEigen3_DIR=/usr/local/include/eigen3/ -LA .. && \
    make VERBOSE=1 -j$(nproc) && \
    make install && \
    cd && \
    rm -r g2o

# Clone source code
# Build RTAB-Map project
#    rm -rf rtabmap && \
# RUN source /ros_entrypoint.sh && \
# RUN find / -type f -iname -name '*thread*cmake'
# RUN find / -type f -iname -name FindPthreads.cmake
RUN apt-get install libpthread-stubs0-dev -y
RUN find / -name FindPthreads.cmake
RUN git clone https://github.com/arrlee/rtabmap.git && \
    cd rtabmap/build && \
    /usr/local/bin/cmake --trace-expand -DCMAKE_CXX_FLAGS="-march=native -faligned-new -g" -DCMAKE_BUILD_TYPE=${EnvBuildType} -DCPUTSDF_DIR=/usr/local/share/cpu_tsdf/ -DWITH_CCCORELIB=OFF -DWITH_ALICE_VISION=OFF -DWITH_CPUTSDF=OFF -DWITH_OPEN3D=OFF -DWITH_CERES=ON -LA .. && \
    make VERBOSE=1 -j$(nproc) && \
    make install && \
    cd && \
    ldconfig

# RUN git clone git://sourceware.org/git/binutils-gdb.git && \
#     cd binutils-gdb && \
#     mkdir build && cd build && \
    

RUN echo "#!/bin/bash" > /ros_entrypoint.sh && echo "gprofng collect app rtabmap" >> /ros_entrypoint.sh

# RelWithDebInfo
RUN apt-get install valgrind -y
# gef
RUN apt-get install file python3 -y
# RUN gdb -nx -ex 'pi print(sys.version)' -ex quit
# RUN git clone --branch dev https://github.com/hugsy/gef.git && echo source `pwd`/gef/gef.py >> ~/.gdbinit
